shnitsel.core.plot.spectra3d
============================

.. py:module:: shnitsel.core.plot.spectra3d


Functions
---------

.. autoapisummary::

   shnitsel.core.plot.spectra3d.spectra_all_times
   shnitsel.core.plot.spectra3d.inlabel
   shnitsel.core.plot.spectra3d.ski_plots
   shnitsel.core.plot.spectra3d.pcm_plots


Module Contents
---------------

.. py:function:: spectra_all_times(inter_state)

.. py:function:: inlabel(s, ax, ha='center', va='center')

.. py:function:: ski_plots(spectra)

   Plot spectra for different times on top of each other,
   along with a dashed line that tracks the maximum.
   One plot per statecomb; plots stacked vertically.
   Expected to be used on data produced by ``spectra3d.spectra_all_times``.

   :param spectra: DataArray containing fosc values organized along 'energy', 'time' and
                   'statecomb' dimensions.

   :rtype: Figure object corresponding to plot.

   .. rubric:: Examples

   >>> from shnitsel.core import xrhelpers as xh, postprocess as P
   >>> from shnitsel.core.plot import spectra3d
   >>> spectra_data = (
           xh.open_frames(path)
           .pipe(P.get_inter_state)
           .pipe(P.assign_fosc)
           .pipe(spectra3d.spectra_all_times))
   >>> spectra3d.ski_plots(spectra_data)


.. py:function:: pcm_plots(spectra)

   Represent fosc as colour in a plot of fosc against time and energy.
   The colour scale is logarithmic.
   One plot per statecomb; plots stacked horizontally.
   Expected to be used on data produced by `spectra3d.spectra_all_times`.

   :param spectra: DataArray containing fosc values organized along 'energy', 'time' and
                   'statecomb' dimensions.

   :rtype: Figure object corresponding to plot.

   .. rubric:: Examples

   >>> from shnitsel.core import xrhelpers as xh, postprocess as P
   >>> from shnitsel.core.plot import spectra3d
   >>> spectra_data = (
           xh.open_frames(path)
           .pipe(P.get_inter_state)
           .pipe(P.assign_fosc)
           .pipe(spectra3d.spectra_all_times))
   >>> spectra3d.pcm_plots(spectra_data)


